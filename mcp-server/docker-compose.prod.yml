# Docker Compose configuration for MCP Draw.io Server - Production Environment
# This configuration is optimized for production with resource limits, security, and monitoring

version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        - BUILDTIME=${BUILDTIME:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - VERSION=${VERSION:-latest}
    image: mcp-drawio-server:${VERSION:-latest}
    container_name: mcp-drawio-server-prod
    
    # Production environment variables
    environment:
      # Required: Anthropic API key
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Production-optimized settings
      - TEMP_DIR=${TEMP_DIR:-/app/temp}
      - DRAWIO_CLI_PATH=${DRAWIO_CLI_PATH:-drawio}
      - CACHE_TTL=${CACHE_TTL:-7200}  # Longer cache for production
      - MAX_CACHE_SIZE=${MAX_CACHE_SIZE:-200}  # Larger cache for production
      - FILE_EXPIRY_HOURS=${FILE_EXPIRY_HOURS:-48}  # Longer expiry for production
      - CLEANUP_INTERVAL_MINUTES=${CLEANUP_INTERVAL_MINUTES:-30}  # Less frequent cleanup
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}  # Minimal logging for production
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-300}  # Standard timeout
      
      # Production flags
      - DEVELOPMENT_MODE=false
      - DEBUG=false
      
      # Server metadata
      - SERVER_NAME=${SERVER_NAME:-MCP Draw.io Server}
      - SERVER_VERSION=${SERVER_VERSION:-1.0.0}
      - PROTOCOL_VERSION=${PROTOCOL_VERSION:-2024-11-05}
    
    # Production volume mounts (minimal)
    volumes:
      # Only mount necessary data directories
      - temp_data_prod:/app/temp
      - logs_data_prod:/app/logs
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMIT:-512M}
          cpus: ${CPU_LIMIT:-1.0}
        reservations:
          memory: ${MEMORY_RESERVATION:-256M}
          cpus: ${CPU_RESERVATION:-0.5}
      
      # Production deployment configuration
      replicas: ${REPLICAS:-1}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Production health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app/src'); from health import HealthChecker; import asyncio; asyncio.run(HealthChecker().get_liveness())"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      start_period: ${HEALTH_CHECK_START_PERIOD:-30s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
    
    # Production restart policy
    restart: unless-stopped
    
    # Production security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem for security
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # User configuration (non-root)
    user: "${UID:-1000}:${GID:-1000}"
    
    # Network configuration
    networks:
      - mcp-prod-network
    
    # Production logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"
        compress: "true"
    
    # Production labels
    labels:
      - "com.example.service=mcp-drawio-server"
      - "com.example.version=${VERSION:-latest}"
      - "com.example.environment=production"
      - "com.example.description=MCP Server for Draw.io diagram generation (Production)"
      - "com.example.maintainer=${MAINTAINER:-ops@example.com}"

  # Optional: Log aggregation service for production
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: mcp-log-aggregator
    volumes:
      - logs_data_prod:/var/log/mcp-server:ro
      - ./config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - mcp-prod-network
    restart: unless-stopped
    depends_on:
      - mcp-server
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Optional: Monitoring service for production
  monitoring:
    image: prom/node-exporter:latest
    container_name: mcp-monitoring
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - mcp-prod-network
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# Production volumes with specific drivers and options
volumes:
  temp_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${TEMP_DATA_PATH:-./temp_prod}
  
  logs_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_DATA_PATH:-./logs_prod}

# Production network with custom configuration
networks:
  mcp-prod-network:
    driver: bridge
    name: mcp-prod-network
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.22.0.0/16}
    driver_opts:
      com.docker.network.bridge.name: mcp-prod-br0