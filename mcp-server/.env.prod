# MCP Draw.io Server - Production Environment Configuration
# Copy this file to .env for production deployment

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# Anthropic API Key (REQUIRED)
# SECURITY: Use Docker secrets or external secret management in production
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# =============================================================================
# PRODUCTION SETTINGS
# =============================================================================

# Build configuration
VERSION=latest
BUILDTIME=

# Server metadata
SERVER_NAME=MCP Draw.io Server
SERVER_VERSION=1.0.0
PROTOCOL_VERSION=2024-11-05

# Maintainer contact for production issues
MAINTAINER=ops@example.com

# =============================================================================
# APPLICATION SETTINGS (Production Optimized)
# =============================================================================

# Temporary files directory
TEMP_DIR=/app/temp

# Draw.io CLI path
DRAWIO_CLI_PATH=drawio

# Cache settings (longer for production efficiency)
CACHE_TTL=7200
MAX_CACHE_SIZE=200

# File management (longer expiry for production)
FILE_EXPIRY_HOURS=48
CLEANUP_INTERVAL_MINUTES=30

# Request timeout (standard for production)
REQUEST_TIMEOUT=300

# Logging (minimal for production)
LOG_LEVEL=WARNING

# Production flags
DEVELOPMENT_MODE=false
DEBUG=false

# =============================================================================
# PRODUCTION RESOURCE LIMITS
# =============================================================================

# Memory limits
MEMORY_LIMIT=512M
MEMORY_RESERVATION=256M

# CPU limits
CPU_LIMIT=1.0
CPU_RESERVATION=0.5

# Deployment configuration
REPLICAS=1

# User configuration (security)
UID=1000
GID=1000

# =============================================================================
# PRODUCTION HEALTH CHECKS
# =============================================================================

# Health check intervals
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_START_PERIOD=30s
HEALTH_CHECK_RETRIES=3

# =============================================================================
# PRODUCTION LOGGING
# =============================================================================

# Log rotation settings
LOG_MAX_SIZE=10m
LOG_MAX_FILES=3

# =============================================================================
# PRODUCTION PATHS
# =============================================================================

# Data directories (should be persistent storage in production)
TEMP_DATA_PATH=/var/lib/mcp-server/temp
LOGS_DATA_PATH=/var/log/mcp-server

# Network configuration
NETWORK_SUBNET=172.22.0.0/16

# =============================================================================
# PRODUCTION SECURITY NOTES
# =============================================================================

# 1. NEVER commit this file with real API keys to version control
# 2. Use Docker secrets or external secret management systems
# 3. Regularly rotate your Anthropic API key
# 4. Monitor API usage and set appropriate rate limits
# 5. Use read-only containers when possible
# 6. Run containers as non-root user
# 7. Enable security scanning for container images
# 8. Use network policies to restrict container communication
# 9. Implement proper backup strategies for persistent data
# 10. Monitor container resource usage and set alerts

# =============================================================================
# PRODUCTION MONITORING
# =============================================================================

# Optional: Enable monitoring services
# Uncomment to enable monitoring profile:
# COMPOSE_PROFILES=monitoring

# =============================================================================
# PRODUCTION DEPLOYMENT
# =============================================================================

# Basic production deployment:
#   docker-compose -f docker-compose.prod.yml up -d --build
#
# Deploy with monitoring:
#   COMPOSE_PROFILES=monitoring docker-compose -f docker-compose.prod.yml up -d --build
#
# Update deployment:
#   docker-compose -f docker-compose.prod.yml pull
#   docker-compose -f docker-compose.prod.yml up -d --no-deps --build mcp-server
#
# Scale deployment:
#   docker-compose -f docker-compose.prod.yml up -d --scale mcp-server=3
#
# View logs:
#   docker-compose -f docker-compose.prod.yml logs -f mcp-server
#
# Health check:
#   docker-compose -f docker-compose.prod.yml exec mcp-server python -c "import sys; sys.path.append('/app/src'); from health import HealthChecker; import asyncio; print(asyncio.run(HealthChecker().get_health()))"

# =============================================================================
# BACKUP AND RECOVERY
# =============================================================================

# Backup persistent data:
#   docker run --rm -v mcp-server_temp_data_prod:/data -v $(pwd):/backup alpine tar czf /backup/temp_data_backup.tar.gz -C /data .
#   docker run --rm -v mcp-server_logs_data_prod:/data -v $(pwd):/backup alpine tar czf /backup/logs_data_backup.tar.gz -C /data .
#
# Restore persistent data:
#   docker run --rm -v mcp-server_temp_data_prod:/data -v $(pwd):/backup alpine tar xzf /backup/temp_data_backup.tar.gz -C /data
#   docker run --rm -v mcp-server_logs_data_prod:/data -v $(pwd):/backup alpine tar xzf /backup/logs_data_backup.tar.gz -C /data