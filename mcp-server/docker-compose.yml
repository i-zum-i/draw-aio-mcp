# Docker Compose configuration for MCP Draw.io Server
# This is the legacy/general purpose configuration
# For environment-specific deployments, use:
# - docker-compose.dev.yml for development
# - docker-compose.prod.yml for production

version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDTIME=${BUILDTIME:-}
        - VERSION=${VERSION:-latest}
    image: mcp-drawio-server:${VERSION:-latest}
    container_name: mcp-drawio-server
    
    # Environment configuration
    environment:
      # Required: Anthropic API key
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Optional: Server configuration
      - TEMP_DIR=${TEMP_DIR:-/app/temp}
      - DRAWIO_CLI_PATH=${DRAWIO_CLI_PATH:-drawio}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - MAX_CACHE_SIZE=${MAX_CACHE_SIZE:-100}
      - FILE_EXPIRY_HOURS=${FILE_EXPIRY_HOURS:-24}
      - CLEANUP_INTERVAL_MINUTES=${CLEANUP_INTERVAL_MINUTES:-60}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-300}
      
      # Server metadata
      - SERVER_NAME=${SERVER_NAME:-MCP Draw.io Server}
      - SERVER_VERSION=${SERVER_VERSION:-1.0.0}
      - PROTOCOL_VERSION=${PROTOCOL_VERSION:-2024-11-05}
    
    # Volume mounts for persistent data
    volumes:
      - temp_data:/app/temp
      - logs_data:/app/logs
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app/src'); from health import HealthChecker; import asyncio; asyncio.run(HealthChecker().get_liveness())"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    
    # Restart policy
    restart: unless-stopped
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Read-only root filesystem (with exceptions for temp and logs)
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Network configuration
    networks:
      - mcp-network
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Labels for container management
    labels:
      - "com.example.service=mcp-drawio-server"
      - "com.example.version=${VERSION:-latest}"
      - "com.example.description=MCP Server for Draw.io diagram generation"

# Development override service
  mcp-server-dev:
    extends: mcp-server
    build:
      target: runtime
      args:
        - BUILDTIME=${BUILDTIME:-}
        - VERSION=${VERSION:-dev}
    image: mcp-drawio-server:dev
    container_name: mcp-drawio-server-dev
    
    # Development-specific configuration
    environment:
      - LOG_LEVEL=DEBUG
      - CACHE_TTL=300  # Shorter cache for development
      - FILE_EXPIRY_HOURS=1  # Shorter file expiry for development
    
    # Mount source code for development
    volumes:
      - ./src:/app/src:ro
      - temp_data_dev:/app/temp
      - logs_data_dev:/app/logs
    
    # Remove read-only restriction for development
    read_only: false
    
    # Development labels
    labels:
      - "com.example.service=mcp-drawio-server"
      - "com.example.version=dev"
      - "com.example.environment=development"

# Named volumes for data persistence
volumes:
  temp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./temp
  
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  temp_data_dev:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./temp_dev
  
  logs_data_dev:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs_dev

# Network configuration
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16